#Data Structures

- Matrix
matrix is a representations of numbers, symbols, or expressions in a 2-Dimensional Array.

ex.

matrix_A = [
    [1, 2, 3, 4],
    [5, 6, 7, 8]
]

# Accessing Matrix A
print('Row 1: %s' % matrix_A[0]) # Recall: Indexing starts at zero in Python
print('Value at Row 2 Column 2: %s' % matrix_A[1][1])


#rules of matrix's

Therefore, we are programming a list within a list and following the rules of a regular matrix:
- All rows must have the same number of values
- All columns must have the same number of values
- All items in the 2D List must have the same data types
- Since indexing always starts at 0 ... row 1 is technically located at matrix_A[0]

-List Comprehension

# Old Method
squares = []
for i in range(10):
    squares.append(i ** 2)

print('Our result: %s' % squares)
Our result: [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
# List Comprehension

squares = [i**2 for i in range(10)]

print('Our new result: %s' % squares)
Our new result: [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]

Essnetially we can take our for loop and put it right into a list funcion to produce ou result without having to make the list variable blank
-A Square Bracket containing an expression that describes the list
-One or more For clause to explain its members
-Then a zero or more if clauses depending on the complexity of the list


